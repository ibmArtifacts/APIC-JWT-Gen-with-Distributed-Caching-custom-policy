swagger: '2.0'
info:
  title: jwt
  x-ibm-name: jwt
  version: 3.0.0
  x-pathalias: jwt-1.0.0
x-ibm-configuration:
  cors:
    enabled: true
  gateway: datapower-api-gateway
  type: rest
  phase: realized
  enforced: true
  testable: true
  assembly:
    execute:
      - operation-switch:
          version: 2.0.0
          title: operation-switch
          case:
            - operations:
                - verb: get
                  path: /gen
              execute:
                - xslt:
                    version: 2.1.0
                    title: xslt-get-cert-serial
                    input: false
                    serialize-output: false
                    source: |-
                      <xsl:stylesheet version="1.0"
                              xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                              xmlns:apigw="http://www.ibm.com/xmlns/datapower/2017/11/apigateway"
                              xmlns:dp="http://www.datapower.com/extensions"
                              extension-element-prefixes="apigw dp"
                              exclude-result-prefixes="apigw">
                              <xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />
                                <xsl:template  match="/">
                                  <xsl:variable name="vPORG" select="apigw:get-variable('api.org.name')"/>
                                  <xsl:variable name="vCatalog" select="apigw:get-variable('api.catalog.name')"/>
                                  <xsl:variable name="vCertSerial">
                                    <xsl:value-of select="dp:get-cert-serial(concat('name:', $vPORG, '_', $vCatalog, '_tlsp-jwtV1.0.0-ca-0'))"/>
                                  </xsl:variable>
                                  <apigw:set-variable name="'currentCertSerial'" value="$vCertSerial"/>
                                </xsl:template>
                            </xsl:stylesheet>
                    compile-settings: {}
                - gatewayscript:
                    version: 2.0.0
                    title: 'gwyscript: get-cache'
                    source: >-
                      var vTTL = 10 //seconds

                      var dm = require('distributed-metadata');

                      let vClientID = context.get('client.app.id');

                      //console.log('****vClientID-from-get-cache: '+
                      vClientID);

                      let vKey = 'var://dist/x-ibm-clientid/' + vClientID;
                      console.log('****vKey-from-get-cache-gwyscript: ' + vKey);

                      dm.getVariable(vKey,function(error,result) {
                        if(!error) {
                          console.log('****Cached-value-found-as: ' + result);
                          
                          let vCachedCertSerial = result.split('|').pop().split(',')[0];
                          console.debug('****vCachedCertSerial: ' + vCachedCertSerial);
                          
                          let vCurrentCertSerial = context.get('currentCertSerial');
                          console.debug('****vCurrentCertSerial: ' + vCurrentCertSerial);
                          
                          let vDate = result.split('|')[0];
                          //console.log('****vDate: ' + vDate);
                          
                          const vJWTElapsedTime = Math.round(((new Date()) - (Date.parse(vDate))) / 1000);
                          console.log('****vJWTElapsedTime: ' + vJWTElapsedTime + ' seconds');
                          
                          //Delete the cache if the TTL has passed, or if the key signing the jwt has been changed.
                          if((vJWTElapsedTime >= vTTL) || (vCachedCertSerial != vCurrentCertSerial)){
                              dm.delVariable(vKey,function(error,delResult) {
                                if(!error) {
                                  //console.log('****delVariable result = ' + delResult);
                                  console.log('****Deleted cache for ' + vKey + ' Either TTL elapsed, or Cert has been updated.****');
                                  context.set('jwtNotFound', 'true');
                                } else {
                                  console.error('****Delete cache errored with = ' + error);
                                }
                              });
                          };
                          context.set('message.headers.JWT-Header', result.split(',')[1]);
                        } else {
                          context.set('jwtNotFound', 'true');
                          console.log('****jwtNotFound: ' + context.get('jwtNotFound'));
                        }
                      });
                - switch:
                    version: 2.1.0
                    title: switch
                    case:
                      - condition: $apiCtx().jwtNotFound = 'true'
                        execute:
                          - gatewayscript:
                              version: 2.0.0
                              title: 'gwyscript: set variables'
                              source: >-
                                context.set('iss-claim', 'apic'); 

                                context.set('aud-claim','IBM');


                                let vJwtKeyName = context.get('api.org.name') +
                                '_' + context.get('api.catalog.name') +
                                '_tlsp-jwtV1.0.0-key';

                                console.debug('****vJwtKeyName: ' +
                                vJwtKeyName); context.set('jwtkey',
                                vJwtKeyName);


                                var appName = context.get('client.app.name'); 

                                //console.log('****appName: ' + appName);


                                if(appName!=null) {
                                  var msg =  {"app_name":appName};
                                  context.set('pvt-claim', msg);
                                } else {
                                  var msg =  {"app_name":"AppNotFOund"};
                                  context.set('pvt-claim', msg);
                                }

                                console.log('****[Completed-setting-all-variables-and-appName]****');
                          - jwt-generate:
                              version: 2.0.0
                              title: jwt-generate
                              jwt: generated.jwt
                              iss-claim: iss-claim
                              exp-claim: 3600
                              aud-claim: aud-claim
                              jws-jwk: ''
                              sub-claim: ''
                              private-claims: pvt-claim
                              jws-crypto: $(jwtkey)
                              jws-alg: RS256
                          - xslt:
                              version: 2.1.0
                              title: xslt-set-cert-serial
                              input: false
                              serialize-output: false
                              source: |-
                                <xsl:stylesheet version="1.0"
                                        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                                        xmlns:apigw="http://www.ibm.com/xmlns/datapower/2017/11/apigateway"
                                        xmlns:dp="http://www.datapower.com/extensions"
                                        extension-element-prefixes="apigw dp"
                                        exclude-result-prefixes="apigw">
                                        <xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />
                                          <xsl:template  match="/">
                                            <xsl:variable name="vPORG" select="apigw:get-variable('api.org.name')"/>
                                            <xsl:variable name="vCatalog" select="apigw:get-variable('api.catalog.name')"/>
                                            <xsl:variable name="vCertSerial">
                                              <xsl:value-of select="dp:get-cert-serial(concat('name:', $vPORG, '_', $vCatalog, '_tlsp-jwtV1.0.0-ca-0'))"/>
                                            </xsl:variable>
                                            <apigw:set-variable name="'setCertSerial'" value="$vCertSerial"/>
                                          </xsl:template>
                                      </xsl:stylesheet>
                              compile-settings: {}
                          - gatewayscript:
                              version: 2.0.0
                              title: 'gwyscript: cache'
                              source: >-
                                var dm = require('distributed-metadata'); 

                                var vJWT = context.get('generated.jwt'); 

                                //console.log('****vJWT: ' + vJWT);

                                var vSetCertSerial =
                                context.get('setCertSerial');

                                var vClientID = context.get('client.app.id'); 

                                //console.log('****vClientID: '+ vClientID);

                                var vKey = 'var://dist/x-ibm-clientid/' +
                                vClientID; 

                                //console.log('****vKey: ' + vKey);

                                var vValue = Date() + '|' + vSetCertSerial + ','
                                + vJWT;


                                dm.setVariable(vKey,
                                vValue,function(error,result) {
                                  if( !error) {
                                    console.log('****setVariable-cache-key-and-value result= ' + result);
                                    console.log('****Cached-the-value: ' + vValue);
                                  } else {
                                    console.error('****setVariable-error = ' + error);
                                  }
                                });
                          - gatewayscript:
                              version: 2.0.0
                              title: 'gwyscript: set jwt header'
                              description: ''
                              source: |-
                                let vJWT = context.get('generated.jwt');
                                context.set('message.headers.JWT-Header', vJWT);
                                console.debug('****vJWTOutput: ' + vJWT);
            - operations:
                - verb: get
                  path: /delete-cache
              execute:
                - gatewayscript:
                    version: 2.0.0
                    title: 'gwyscript: delete-cache'
                    source: |-
                      var dm = require('distributed-metadata');

                      let vClientID = context.get('client.app.id');
                      console.log('****vClientID-from-get-cache: '+ vClientID);

                      let vKey = 'var://dist/x-ibm-clientid/' + vClientID;
                      console.log('****vKey-from-get-cache: ' + vKey);

                      dm.delVariable(vKey,function(error,result) {
                        if(!error) {
                          console.log('****delVariable result = ' + result);
                        } else {
                          console.error('****delVariable error = ' + error);
                        }
                      });
          otherwise: []
    finally: []
  properties:
    target-url:
      value: http://demo3320145.mockable.io/
      description: The URL of the target service
      encoded: false
  activity-log:
    enabled: true
    success-content: activity
    error-content: payload
basePath: /jwt/v2
paths:
  /gen:
    get:
      responses:
        '200':
          description: success 200 ok
          schema:
            type: string
      consumes: []
      produces: []
    parameters: []
  /delete-cache:
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
securityDefinitions:
  clientID:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  secret:
    type: apiKey
    x-key-type: client_secret
    name: X-IBM-Client-Secret
    in: header
schemes:
  - https
security:
  - clientID: []
